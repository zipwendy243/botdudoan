import os
import logging
import re
from openai import OpenAI
from pgsoft_scraper import PGSoftScraper
from models import PGSoftGame
from app import db
from language_service import LanguageService

logger = logging.getLogger(__name__)

class SlotGameService:
    def __init__(self):
        """Initialize the slot game service with OpenAI client and PGSoft scraper."""
        # Initialize OpenAI client
        self.openai_api_key = os.environ.get("OPENAI_API_KEY")
        if not self.openai_api_key:
            raise ValueError("OPENAI_API_KEY environment variable is not set")
        
        self.openai = OpenAI(api_key=self.openai_api_key)
        
        # Initialize PGSoft scraper
        self.scraper = PGSoftScraper()
        
        # Initialize language service
        self.language_service = LanguageService()
        
        # Popular PGSoft slot games
        self.popular_games = [
            "Mahjong Ways",
            "Mahjong Ways 2",
            "Fortune Mouse",
            "Lucky Neko",
            "Treasures of Aztec",
            "Wild Bandito",
            "Ganesha Fortune",
            "Queen of Bounty",
            "Dragon Hatch",
            "Gem Saviour Sword",
            "Phoenix Rises",
            "Dreams of Macau",
            "Leprechaun Riches",
            "Medusa 2",
            "Buffalo Win",
            "Dragon Tiger Luck",
            "Candy Burst",
            "Piggy Gold",
            "The Great Icescape",
            "Jungle Delight"
        ]
        
        # Build the game ID mapping
        self.game_id_mapping = {
            "mahjong ways": "pg-soft-mahjong-ways",
            "mahjong ways 2": "pg-soft-mahjong-ways-2",
            "fortune mouse": "pg-soft-fortune-mouse",
            "lucky neko": "pg-soft-lucky-neko",
            "treasures of aztec": "pg-soft-treasures-of-aztec",
            "wild bandito": "pg-soft-wild-bandito",
            "ganesha fortune": "pg-soft-ganesha-fortune",
            "queen of bounty": "pg-soft-queen-of-bounty",
            "dragon hatch": "pg-soft-dragon-hatch",
            "gem saviour sword": "pg-soft-gem-saviour-sword",
            "phoenix rises": "pg-soft-phoenix-rises",
            "dreams of macau": "pg-soft-dreams-of-macau",
            "leprechaun riches": "pg-soft-leprechaun-riches",
            "medusa 2": "pg-soft-medusa-2",
            "buffalo win": "pg-soft-buffalo-win",
            "dragon tiger luck": "pg-soft-dragon-tiger-luck",
            "candy burst": "pg-soft-candy-burst",
            "piggy gold": "pg-soft-piggy-gold",
            "the great icescape": "pg-soft-the-great-icescape",
            "jungle delight": "pg-soft-jungle-delight"
        }
        
        logger.info("Slot game service initialized")

    def get_game_info(self, game_name, language_code='vi'):
        """
        Get detailed information about a PGSoft slot game using real data from
        the official website combined with GPT-4o Mini analysis.
        
        Args:
            game_name (str): The name of the PGSoft slot game
            language_code (str): The language code to generate the information in
            
        Returns:
            str: Detailed information about the game in the requested language with image URL
        """
        try:
            # Convert game name to standardized format for lookup
            game_name_lower = game_name.lower().strip()
            
            # Find the game ID by using our mapping or constructing it
            game_id = None
            if game_name_lower in self.game_id_mapping:
                game_id = self.game_id_mapping[game_name_lower]
            else:
                # Try to construct a likely game ID format
                game_id = f"pg-soft-{re.sub(r'[^a-z0-9]+', '-', game_name_lower)}"
            
            # Fetch game details from our scraper or database
            game_data = None
            
            # Check database first
            cached_game = PGSoftGame.query.filter_by(game_id=game_id).first()
            if cached_game and PGSoftGame.is_cache_valid(game_id):
                logger.info(f"Using cached game data for: {game_name}")
                game_data = cached_game.to_dict()
            else:
                # Fetch fresh data if no cache or cache is expired
                logger.info(f"Fetching fresh game data for: {game_name}")
                game_data = self.scraper.fetch_game_details(game_id)
                
            # If we couldn't find the game, try a more generic approach
            if not game_data:
                logger.warning(f"Could not find game data for {game_name}, using generic info")
                return self._generate_generic_game_info(game_name, language_code)
                
            # Extract game details
            name = game_data.get('name', game_name)
            description = game_data.get('description', '')
            
            # Handle fallback image URLs for known games
            image_url = game_data.get('image_url', '')
            if not image_url:
                fallback_images = {
                    'pg-soft-mahjong-ways': 'https://45.76.150.54/wp-content/uploads/2025/05/1.jpg',
                    'pg-soft-mahjong-ways-2': 'https://45.76.150.54/wp-content/uploads/2025/05/1.jpg',
                    'pg-soft-fortune-mouse': 'https://45.76.150.54/wp-content/uploads/2025/05/2.jpg',
                    'pg-soft-lucky-neko': 'https://pgslot.cc/wp-content/uploads/2020/12/lucky-neko.jpg',
                    'pg-soft-dragon-tiger-luck': 'https://www.pgslot9999.com/wp-content/uploads/2020/02/dragon-tiger-luck-1536x864.jpg',
                    'pg-soft-treasures-of-aztec': 'https://www.pgslot9999.com/wp-content/uploads/2020/02/treasures-of-aztec-1536x864.jpg',
                    'pg-soft-ganesha-fortune': 'https://www.pgslot9999.com/wp-content/uploads/2020/02/ganesha-fortune-1536x864.jpg'
                }
                
                game_id = game_data.get('game_id', '')
                if game_id and game_id in fallback_images:
                    image_url = fallback_images[game_id]
                elif game_name.lower() == 'mahjong ways 2':
                    image_url = fallback_images['pg-soft-mahjong-ways-2']
                elif game_name.lower() == 'mahjong ways':
                    image_url = fallback_images['pg-soft-mahjong-ways']
            
            rtp = game_data.get('rtp', 'N/A')
            detail_url = game_data.get('detail_url', '')
            
            # Define language-specific templates
            templates = {
                'vi': {
                    'system_content': "B·∫°n l√† m·ªôt chuy√™n gia v·ªÅ game slot PGSoft v·ªõi ki·∫øn th·ª©c chuy√™n s√¢u v·ªÅ c√°ch ch∆°i, chi·∫øn thu·∫≠t v√† th√¥ng s·ªë k·ªπ thu·∫≠t c·ªßa t·∫•t c·∫£ c√°c game. B·∫°n lu√¥n cung c·∫•p th√¥ng tin ch√≠nh x√°c, ƒë·∫ßy ƒë·ªß v√† h·ªØu √≠ch b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n.",
                    'prompt_template': f"""
                    H√£y vi·∫øt m·ªôt b√†i gi·ªõi thi·ªáu t·ªïng quan v·ªÅ game slot PGSoft c√≥ t√™n "{name}" d·ª±a tr√™n
                    c√°c th√¥ng tin th·ª±c t·ª´ trang web ch√≠nh th·ª©c:
                    
                    T√™n game: {name}
                    M√¥ t·∫£: {description}
                    T·ª∑ l·ªá tr·∫£ th∆∞·ªüng (RTP): {rtp}
                    Link chi ti·∫øt: {detail_url}
                    
                    B√†i vi·∫øt ph·∫£i bao g·ªìm c√°c th√¥ng tin sau:
                    1. Gi·ªõi thi·ªáu t·ªïng quan v·ªÅ game v√† ch·ªß ƒë·ªÅ c·ªßa game
                    2. C√°ch k√≠ch ho·∫°t t√≠nh nƒÉng free spin ho·∫∑c bonus game
                    3. T·ª∑ l·ªá tr·∫£ th∆∞·ªüng (RTP) tr√≠ch d·∫´n ch√≠nh x√°c t·ª´ ngu·ªìn
                    4. C√°c m·∫πo v√† chi·∫øn thu·∫≠t ƒë·ªÉ tƒÉng c∆° h·ªôi th·∫Øng
                    
                    H√£y vi·∫øt b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n, th√¢n thi·ªán v√† d·ªÖ hi·ªÉu. S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ l√†m n·ªïi b·∫≠t th√¥ng tin.
                    Gi·ªõi h·∫°n b√†i vi·∫øt trong kho·∫£ng 150-200 t·ª´.
                    """,
                    'header': f"<b>üéÆ TH√îNG TIN GAME: {name.upper()} üéÆ</b>",
                    'rtp_label': f"<b>üîç RTP: {rtp}</b>",
                    'footer': "<i>Ch√∫c b·∫°n may m·∫Øn v√† ch∆°i game vui v·∫ª! H√£y nh·ªõ ch∆°i c√≥ tr√°ch nhi·ªám.</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé Ch∆°i ngay t·∫°i NOVA88BET üíé</a>"
                },
                'en': {
                    'system_content': "You are an expert on PGSoft slot games with deep knowledge of gameplay, strategies, and technical specifications of all games. You always provide accurate, complete, and useful information in natural English.",
                    'prompt_template': f"""
                    Please write an overview of the PGSoft slot game named "{name}" based on
                    real information from the official website:
                    
                    Game name: {name}
                    Description: {description}
                    Return to Player (RTP): {rtp}
                    Detail link: {detail_url}
                    
                    The article must include the following information:
                    1. General introduction to the game and its theme
                    2. How to activate free spin or bonus game features
                    3. Return to Player (RTP) rate quoted accurately from source
                    4. Tips and strategies to increase chances of winning
                    
                    Please write in natural, friendly, and easy-to-understand English. Use appropriate emojis to highlight information.
                    Limit the article to about 150-200 words.
                    """,
                    'header': f"<b>üéÆ GAME INFORMATION: {name.upper()} üéÆ</b>",
                    'rtp_label': f"<b>üîç RTP: {rtp}</b>",
                    'footer': "<i>Good luck and have fun playing! Remember to play responsibly.</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé Play now at NOVA88BET üíé</a>"
                },
                'th': {
                    'system_content': "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏Å‡∏°‡∏™‡∏•‡πá‡∏≠‡∏ï PGSoft ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏™‡∏°‡∏≠",
                    'prompt_template': f"""
                    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡∏™‡∏•‡πá‡∏≠‡∏ï PGSoft ‡∏ä‡∏∑‡πà‡∏≠ "{name}" ‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å
                    ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£:
                    
                    ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°: {name}
                    ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {description}
                    ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (RTP): {rtp}
                    ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {detail_url}
                    
                    ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
                    1. ‡∏ö‡∏ó‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏ò‡∏µ‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°
                    2. ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ü‡∏£‡∏µ‡∏™‡∏õ‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏Å‡∏°
                    3. ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (RTP) ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤
                    4. ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞
                    
                    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ô‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 150-200 ‡∏Ñ‡∏≥
                    """,
                    'header': f"<b>üéÆ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°: {name.upper()} üéÆ</b>",
                    'rtp_label': f"<b>üîç RTP: {rtp}</b>",
                    'footer': "<i>‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡∏ô‡∏∏‡∏Å‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô! ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏¢‡∏ó‡∏µ‡πà NOVA88BET üíé</a>"
                },
                'zh': {
                    'system_content': "ÊÇ®ÊòØPGSoftËÄÅËôéÊú∫Ê∏∏Êàè‰∏ìÂÆ∂ÔºåÂØπÊâÄÊúâÊ∏∏ÊàèÁöÑÁé©Ê≥ï„ÄÅÁ≠ñÁï•ÂíåÊäÄÊúØËßÑÊ†ºÊúâÊ∑±ÂÖ•‰∫ÜËß£„ÄÇÊÇ®ÂßãÁªà‰ª•Ëá™ÁÑ∂ÁöÑ‰∏≠ÊñáÊèê‰æõÂáÜÁ°Æ„ÄÅÂÆåÊï¥ÂíåÊúâÁî®ÁöÑ‰ø°ÊÅØ„ÄÇ",
                    'prompt_template': f"""
                    ËØ∑Ê†πÊçÆÂÆòÊñπÁΩëÁ´ôÁöÑÁúüÂÆû‰ø°ÊÅØÔºåÁºñÂÜôÂÖ≥‰∫éPGSoftËÄÅËôéÊú∫Ê∏∏Êàè"{name}"ÁöÑÊ¶ÇËø∞Ôºö
                    
                    Ê∏∏ÊàèÂêçÁß∞Ôºö{name}
                    ÊèèËø∞Ôºö{description}
                    Áé©ÂÆ∂ÂõûÊä•Áéá(RTP)Ôºö{rtp}
                    ËØ¶ÊÉÖÈìæÊé•Ôºö{detail_url}
                    
                    ÊñáÁ´†ÂøÖÈ°ªÂåÖÂê´‰ª•‰∏ã‰ø°ÊÅØÔºö
                    1. Ê∏∏ÊàèÂèäÂÖ∂‰∏ªÈ¢òÁöÑ‰∏ÄËà¨‰ªãÁªç
                    2. Â¶Ç‰ΩïÊøÄÊ¥ªÂÖçË¥πÊóãËΩ¨ÊàñÂ•ñÂä±Ê∏∏ÊàèÂäüËÉΩ
                    3. ÂáÜÁ°ÆÂºïÁî®Êù•Ê∫êÁöÑÁé©ÂÆ∂ÂõûÊä•Áéá(RTP)
                    4. Â¢ûÂä†Ëé∑ËÉúÊú∫‰ºöÁöÑÊäÄÂ∑ßÂíåÁ≠ñÁï•
                    
                    ËØ∑Áî®Ëá™ÁÑ∂„ÄÅÂèãÂ•ΩÂíåÊòì‰∫éÁêÜËß£ÁöÑ‰∏≠ÊñáÂÜô‰Ωú„ÄÇ‰ΩøÁî®ÈÄÇÂΩìÁöÑË°®ÊÉÖÁ¨¶Âè∑Á™ÅÂá∫‰ø°ÊÅØ„ÄÇ
                    Â∞ÜÊñáÁ´†ÈôêÂà∂Âú®Á∫¶150-200Â≠ó„ÄÇ
                    """,
                    'header': f"<b>üéÆ Ê∏∏Êàè‰ø°ÊÅØÔºö{name.upper()} üéÆ</b>",
                    'rtp_label': f"<b>üîç RTP: {rtp}</b>",
                    'footer': "<i>Á•ùÊÇ®Â•ΩËøêÔºåÁé©ÂæóÂºÄÂøÉÔºÅËØ∑ËÆ∞ÂæóË¥üË¥£‰ªªÂú∞Ê∏∏Êàè„ÄÇ</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé Á´ãÂç≥Âú®NOVA88BET‰∏äÁé© üíé</a>"
                }
            }
            
            # Select the appropriate language template or default to Vietnamese
            if language_code not in templates:
                logger.warning(f"Language code '{language_code}' not supported for slot game info, using Vietnamese")
                language_code = 'vi'
                
            template = templates[language_code]
            
            # the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
            # do not change this unless explicitly requested by the user
            response = self.openai.chat.completions.create(
                model="gpt-4o-mini",  # Using GPT-4o Mini as specified in requirements
                messages=[
                    {"role": "system", "content": template['system_content']},
                    {"role": "user", "content": template['prompt_template']}
                ],
                max_tokens=500
            )
            
            game_info = response.choices[0].message.content
            
            # Format the response with a header and the actual image URL
            formatted_info = f"""
{template['header']}

{game_info}

{template['rtp_label']}

{template['footer']}

{template['play_button']}
"""
            
            logger.info(f"Generated slot game info with real data for: {game_name}")
            
            # Return both the formatted info text and image URL so the bot handler can use it
            return {"text": formatted_info, "image_url": image_url}
            
        except Exception as e:
            logger.error(f"Error generating slot game info: {e}")
            return {"text": f"‚ùå ƒê√£ x·∫£y ra l·ªói khi t√¨m th√¥ng tin v·ªÅ game '{game_name}'. Vui l√≤ng th·ª≠ l·∫°i sau. Error: {str(e)}", "image_url": None}

    def _generate_generic_game_info(self, game_name, language_code='vi'):
        """Generate generic game info when specific data cannot be found."""
        try:
            # Try to find a fallback image based on game name
            fallback_image_url = None
            fallback_images = {
                'mahjong ways': 'https://45.76.150.54/wp-content/uploads/2025/05/1.jpg',
                'mahjong ways 2': 'https://45.76.150.54/wp-content/uploads/2025/05/1.jpg',
                'fortune mouse': 'https://45.76.150.54/wp-content/uploads/2025/05/2.jpg',
                'lucky neko': 'https://pgslot.cc/wp-content/uploads/2020/12/lucky-neko.jpg',
                'dragon tiger luck': 'https://www.pgslot9999.com/wp-content/uploads/2020/02/dragon-tiger-luck-1536x864.jpg',
                'treasures of aztec': 'https://www.pgslot9999.com/wp-content/uploads/2020/02/treasures-of-aztec-1536x864.jpg',
                'ganesha fortune': 'https://www.pgslot9999.com/wp-content/uploads/2020/02/ganesha-fortune-1536x864.jpg',
                'wild bandito': 'https://www.pgslot9999.com/wp-content/uploads/2020/02/wild-bandito-1536x864.jpg',
                'queen of bounty': 'https://www.pgslot9999.com/wp-content/uploads/2020/02/queen-of-bounty-1536x864.jpg'
            }
            
            game_name_lower = game_name.lower()
            if game_name_lower in fallback_images:
                fallback_image_url = fallback_images[game_name_lower]
            else:
                # Use a generic PGSoft image as default fallback
                fallback_image_url = "https://www.pgslot9999.com/wp-content/uploads/2020/02/pgslot99-01.jpg"
            
            # Define language-specific templates
            templates = {
                'vi': {
                    'system_content': "B·∫°n l√† m·ªôt chuy√™n gia v·ªÅ game slot PGSoft v·ªõi ki·∫øn th·ª©c chuy√™n s√¢u v·ªÅ c√°ch ch∆°i, chi·∫øn thu·∫≠t v√† th√¥ng s·ªë k·ªπ thu·∫≠t c·ªßa t·∫•t c·∫£ c√°c game. B·∫°n lu√¥n cung c·∫•p th√¥ng tin ch√≠nh x√°c, ƒë·∫ßy ƒë·ªß v√† h·ªØu √≠ch b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n.",
                    'prompt_template': f"""
                    H√£y m√¥ t·∫£ chi ti·∫øt v·ªÅ game slot PGSoft c√≥ t√™n "{game_name}" bao g·ªìm c√°c th√¥ng tin sau:
                    
                    1. H√¨nh ·∫£nh v√† ch·ªß ƒë·ªÅ c·ªßa game
                    2. C√°ch k√≠ch ho·∫°t t√≠nh nƒÉng free spin ho·∫∑c bonus game
                    3. ∆Ø·ªõc t√≠nh t·ª∑ l·ªá tr·∫£ th∆∞·ªüng (RTP) d·ª±a tr√™n c√°c game PGSoft t∆∞∆°ng t·ª±
                    4. C√°c m·∫πo v√† chi·∫øn thu·∫≠t ƒë·ªÉ tƒÉng c∆° h·ªôi th·∫Øng
                    
                    H√£y vi·∫øt b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n, th√¢n thi·ªán v√† d·ªÖ hi·ªÉu. S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ l√†m n·ªïi b·∫≠t th√¥ng tin.
                    """,
                    'header': f"<b>üéÆ TH√îNG TIN GAME: {game_name.upper()} üéÆ</b>",
                    'footer': "<i>Ch√∫c b·∫°n may m·∫Øn v√† ch∆°i game vui v·∫ª! H√£y nh·ªõ ch∆°i c√≥ tr√°ch nhi·ªám.</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé Ch∆°i ngay t·∫°i NOVA88BET üíé</a>"
                },
                'en': {
                    'system_content': "You are an expert on PGSoft slot games with deep knowledge of gameplay, strategies, and technical specifications of all games. You always provide accurate, complete, and useful information in natural English.",
                    'prompt_template': f"""
                    Please provide a detailed description of the PGSoft slot game named "{game_name}" including the following information:
                    
                    1. Visuals and theme of the game
                    2. How to activate free spin or bonus game features
                    3. Estimated Return to Player (RTP) based on similar PGSoft games
                    4. Tips and strategies to increase chances of winning
                    
                    Please write in natural, friendly, and easy-to-understand English. Use appropriate emojis to highlight information.
                    """,
                    'header': f"<b>üéÆ GAME INFORMATION: {game_name.upper()} üéÆ</b>",
                    'footer': "<i>Good luck and have fun playing! Remember to play responsibly.</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé Play now at NOVA88BET üíé</a>"
                },
                'th': {
                    'system_content': "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏Å‡∏°‡∏™‡∏•‡πá‡∏≠‡∏ï PGSoft ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏™‡∏°‡∏≠",
                    'prompt_template': f"""
                    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡∏™‡∏•‡πá‡∏≠‡∏ï PGSoft ‡∏ä‡∏∑‡πà‡∏≠ "{game_name}" ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
                    
                    1. ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ò‡∏µ‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°
                    2. ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ü‡∏£‡∏µ‡∏™‡∏õ‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏Å‡∏°
                    3. ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (RTP) ‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏° PGSoft ‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô
                    4. ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞
                    
                    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ô‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    """,
                    'header': f"<b>üéÆ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°: {game_name.upper()} üéÆ</b>",
                    'footer': "<i>‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡∏ô‡∏∏‡∏Å‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô! ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏¢‡∏ó‡∏µ‡πà NOVA88BET üíé</a>"
                },
                'zh': {
                    'system_content': "ÊÇ®ÊòØPGSoftËÄÅËôéÊú∫Ê∏∏Êàè‰∏ìÂÆ∂ÔºåÂØπÊâÄÊúâÊ∏∏ÊàèÁöÑÁé©Ê≥ï„ÄÅÁ≠ñÁï•ÂíåÊäÄÊúØËßÑÊ†ºÊúâÊ∑±ÂÖ•‰∫ÜËß£„ÄÇÊÇ®ÂßãÁªà‰ª•Ëá™ÁÑ∂ÁöÑ‰∏≠ÊñáÊèê‰æõÂáÜÁ°Æ„ÄÅÂÆåÊï¥ÂíåÊúâÁî®ÁöÑ‰ø°ÊÅØ„ÄÇ",
                    'prompt_template': f"""
                    ËØ∑ËØ¶ÁªÜÊèèËø∞Âêç‰∏∫"{game_name}"ÁöÑPGSoftËÄÅËôéÊú∫Ê∏∏ÊàèÔºåÂåÖÊã¨‰ª•‰∏ã‰ø°ÊÅØÔºö
                    
                    1. Ê∏∏ÊàèÁöÑËßÜËßâÊïàÊûúÂíå‰∏ªÈ¢ò
                    2. Â¶Ç‰ΩïÊøÄÊ¥ªÂÖçË¥πÊóãËΩ¨ÊàñÂ•ñÂä±Ê∏∏ÊàèÂäüËÉΩ
                    3. Ê†πÊçÆÁ±ª‰ººÁöÑPGSoftÊ∏∏Êàè‰º∞ËÆ°ÁöÑÁé©ÂÆ∂ÂõûÊä•Áéá(RTP)
                    4. Â¢ûÂä†Ëé∑ËÉúÊú∫‰ºöÁöÑÊäÄÂ∑ßÂíåÁ≠ñÁï•
                    
                    ËØ∑Áî®Ëá™ÁÑ∂„ÄÅÂèãÂ•ΩÂíåÊòì‰∫éÁêÜËß£ÁöÑ‰∏≠ÊñáÂÜô‰Ωú„ÄÇ‰ΩøÁî®ÈÄÇÂΩìÁöÑË°®ÊÉÖÁ¨¶Âè∑Á™ÅÂá∫‰ø°ÊÅØ„ÄÇ
                    """,
                    'header': f"<b>üéÆ Ê∏∏Êàè‰ø°ÊÅØÔºö{game_name.upper()} üéÆ</b>",
                    'footer': "<i>Á•ùÊÇ®Â•ΩËøêÔºåÁé©ÂæóÂºÄÂøÉÔºÅËØ∑ËÆ∞ÂæóË¥üË¥£‰ªªÂú∞Ê∏∏Êàè„ÄÇ</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé Á´ãÂç≥Âú®NOVA88BET‰∏äÁé© üíé</a>"
                }
            }
            
            # Select the appropriate language template or default to Vietnamese
            if language_code not in templates:
                logger.warning(f"Language code '{language_code}' not supported for generic slot game info, using Vietnamese")
                language_code = 'vi'
                
            template = templates[language_code]
            
            # the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
            # do not change this unless explicitly requested by the user
            response = self.openai.chat.completions.create(
                model="gpt-4o-mini",  # Using GPT-4o Mini as specified in requirements
                messages=[
                    {"role": "system", "content": template['system_content']},
                    {"role": "user", "content": template['prompt_template']}
                ],
                max_tokens=500
            )
            
            game_info = response.choices[0].message.content
            
            # Format the response with a header
            formatted_info = f"""
{template['header']}

{game_info}

{template['footer']}

{template['play_button']}
"""
            
            logger.info(f"Generated generic slot game info for: {game_name} in {language_code}")
            return {"text": formatted_info, "image_url": fallback_image_url}
            
        except Exception as e:
            logger.error(f"Error generating generic game info: {e}")
            return {"text": f"‚ùå ƒê√£ x·∫£y ra l·ªói khi t√¨m th√¥ng tin v·ªÅ game '{game_name}'. Vui l√≤ng th·ª≠ l·∫°i sau.", "image_url": None}

    def get_popular_games_list(self, language_code='vi'):
        """
        Get a formatted list of popular PGSoft slot games in the specified language.
        
        Args:
            language_code (str): The language code to generate the list in
            
        Returns:
            dict: Contains formatted text list and a list of game data
        """
        try:
            # Try to fetch real game data from scraper
            games_data = []
            for game_name in self.popular_games:
                game_name_lower = game_name.lower()
                if game_name_lower in self.game_id_mapping:
                    game_id = self.game_id_mapping[game_name_lower]
                    
                    # Check if we have cached data
                    cached_game = PGSoftGame.query.filter_by(game_id=game_id).first()
                    if cached_game:
                        games_data.append(cached_game.to_dict())
            
            # If we don't have enough games from cache, fetch some from the website
            if len(games_data) < 5:
                try:
                    fetched_games = self.scraper.fetch_game_list()
                    if fetched_games:
                        for game in fetched_games[:20]:  # Limit to 20 games
                            games_data.append(game)
                except Exception as e:
                    logger.error(f"Error fetching game list: {e}")
            
            # Make sure we have at least the popular games list even if scraping failed
            if not games_data:
                games_data = [{"name": game} for game in self.popular_games]
            
            # Define language-specific templates
            templates = {
                'vi': {
                    'header': "<b>üéØ DANH S√ÅCH C√ÅC GAME SLOT PGSOFT PH·ªî BI·∫æN üéØ</b>",
                    'usage_info': "<i>S·ª≠ d·ª•ng l·ªánh /slotgame t√™n_game ƒë·ªÉ xem th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt game c·ª• th·ªÉ.</i>",
                    'example': "<i>V√≠ d·ª•: /slotgame Mahjong Ways 2</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé Ch∆°i ngay t·∫°i NOVA88BET üíé</a>"
                },
                'en': {
                    'header': "<b>üéØ LIST OF POPULAR PGSOFT SLOT GAMES üéØ</b>",
                    'usage_info': "<i>Use the /slotgame game_name command to view detailed information about a specific game.</i>",
                    'example': "<i>Example: /slotgame Mahjong Ways 2</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé Play now at NOVA88BET üíé</a>"
                },
                'th': {
                    'header': "<b>üéØ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡∏™‡∏•‡πá‡∏≠‡∏ï PGSOFT ‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° üéØ</b>",
                    'usage_info': "<i>‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /slotgame ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞</i>",
                    'example': "<i>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: /slotgame Mahjong Ways 2</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏¢‡∏ó‡∏µ‡πà NOVA88BET üíé</a>"
                },
                'zh': {
                    'header': "<b>üéØ ÁÉ≠Èó®PGSOFTËÄÅËôéÊú∫Ê∏∏ÊàèÂàóË°® üéØ</b>",
                    'usage_info': "<i>‰ΩøÁî® /slotgame Ê∏∏ÊàèÂêçÁß∞ ÂëΩ‰ª§Êü•ÁúãÁâπÂÆöÊ∏∏ÊàèÁöÑËØ¶ÁªÜ‰ø°ÊÅØ„ÄÇ</i>",
                    'example': "<i>Á§∫‰æãÔºö/slotgame Mahjong Ways 2</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé Á´ãÂç≥Âú®NOVA88BET‰∏äÁé© üíé</a>"
                }
            }
            
            # Select the appropriate language template or default to Vietnamese
            if language_code not in templates:
                logger.warning(f"Language code '{language_code}' not supported for game list, using Vietnamese")
                language_code = 'vi'
                
            template = templates[language_code]
            
            # Create a formatted list string
            game_list = "\n".join([f"üéÆ {i+1}. {game.get('name')}" for i, game in enumerate(games_data[:20])])
            
            formatted_list = f"""
{template['header']}

{game_list}

{template['usage_info']}
{template['example']}

{template['play_button']}
"""
            logger.info(f"Generated popular games list in {language_code}")
            return {"text": formatted_list, "games": games_data}
            
        except Exception as e:
            logger.error(f"Error generating game list: {e}")
            
            # Define language-specific error templates
            error_templates = {
                'vi': {
                    'header': "<b>üéØ DANH S√ÅCH C√ÅC GAME SLOT PGSOFT PH·ªî BI·∫æN üéØ</b>",
                    'usage_info': "<i>S·ª≠ d·ª•ng l·ªánh /slotgame t√™n_game ƒë·ªÉ xem th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt game c·ª• th·ªÉ.</i>",
                    'example': "<i>V√≠ d·ª•: /slotgame Mahjong Ways 2</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé Ch∆°i ngay t·∫°i NOVA88BET üíé</a>"
                },
                'en': {
                    'header': "<b>üéØ LIST OF POPULAR PGSOFT SLOT GAMES üéØ</b>",
                    'usage_info': "<i>Use the /slotgame game_name command to view detailed information about a specific game.</i>",
                    'example': "<i>Example: /slotgame Mahjong Ways 2</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé Play now at NOVA88BET üíé</a>"
                },
                'th': {
                    'header': "<b>üéØ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡∏™‡∏•‡πá‡∏≠‡∏ï PGSOFT ‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° üéØ</b>",
                    'usage_info': "<i>‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /slotgame ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞</i>",
                    'example': "<i>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: /slotgame Mahjong Ways 2</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏¢‡∏ó‡∏µ‡πà NOVA88BET üíé</a>"
                },
                'zh': {
                    'header': "<b>üéØ ÁÉ≠Èó®PGSOFTËÄÅËôéÊú∫Ê∏∏ÊàèÂàóË°® üéØ</b>",
                    'usage_info': "<i>‰ΩøÁî® /slotgame Ê∏∏ÊàèÂêçÁß∞ ÂëΩ‰ª§Êü•ÁúãÁâπÂÆöÊ∏∏ÊàèÁöÑËØ¶ÁªÜ‰ø°ÊÅØ„ÄÇ</i>",
                    'example': "<i>Á§∫‰æãÔºö/slotgame Mahjong Ways 2</i>",
                    'play_button': "<a href=\"https://nova88bet.top/\">üíé Á´ãÂç≥Âú®NOVA88BET‰∏äÁé© üíé</a>"
                }
            }
            
            # Select the appropriate error template or default to Vietnamese
            if language_code not in error_templates:
                language_code = 'vi'
                
            error_template = error_templates[language_code]
            
            # Fallback to simple list if anything fails
            game_list = "\n".join([f"üéÆ {i+1}. {game}" for i, game in enumerate(self.popular_games)])
            
            formatted_list = f"""
{error_template['header']}

{game_list}

{error_template['usage_info']}
{error_template['example']}

{error_template['play_button']}
"""
            logger.info(f"Generated fallback popular games list in {language_code}")
            return {"text": formatted_list, "games": []}